{"version":3,"sources":["components/PlayingCard/Icons/ace-of-spades.svg","components/PlayingCard/Icons/crown.svg","components/PlayingCard/Icons/playingCardBackBackground.png","components/PlayingCard/PlayingCardTitleContent.js","components/PlayingCard/PlayingCardFront.js","components/PlayingCard/PlayingCardBack.js","components/PlayingCard/PlayingCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlayingCardTitleContent","props","className","onClick","flip","src","Spades","PlayingCardFront","Crown","alt","PlayingCardBack","PlayingCardBackBackground","PlayingCard","useState","flipClass","setFlipClass","toggleFlipClass","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,uD,+PCiB5BC,G,MAZiB,SAAAC,GAC5B,OACI,yBAAKC,UAAU,8BACX,0BAAMA,UAAU,oCAAhB,KACA,wBAAIA,UAAU,oCAAd,mBACA,yBAAKC,QAASF,EAAMG,KAAMF,UAAU,8CAChC,yBAAKA,UAAU,mCAAmCG,IAAKC,U,gBCcxDC,G,MAlBU,SAAAN,GACrB,OACI,yBAAKC,UAAU,sBACX,yBAAKA,UAAU,gCACX,4BAAQA,UAAU,uBACd,kBAAC,EAAD,CAAyBE,KAAMH,EAAMG,QAEzC,6BAASF,UAAU,wBACf,yBAAKG,IAAKG,IAAOC,IAAI,WAEzB,4BAAQP,UAAU,uBACd,kBAAC,EAAD,CAAyBE,KAAMH,EAAMG,Y,wBCH1CM,EAVS,SAAAT,GACpB,OACI,yBAAKC,UAAU,oBAAoBC,QAASF,EAAMG,MAC9C,yBAAKF,UAAU,+BACX,yBAAKA,UAAU,+BAA+BG,IAAKM,SCWpDC,G,MAfK,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACfC,EADe,KACJC,EADI,KAEhBC,EAAkB,WACpBD,EAA0B,IAAbD,EAAkB,YAAc,KAEjD,OACI,6BAASZ,UAAU,gBACf,yBAAKA,UAAS,iCAA6BY,IACvC,kBAAC,EAAD,CAAkBV,KAAMY,IACxB,kBAAC,EAAD,CAAiBZ,KAAMY,QCFxBC,EARH,WACV,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.950ae792.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ace-of-spades.07be9e51.svg\";","module.exports = __webpack_public_path__ + \"static/media/crown.80714de7.svg\";","module.exports = __webpack_public_path__ + \"static/media/playingCardBackBackground.25b4a4d6.png\";","import React from 'react';\nimport Spades from './Icons/ace-of-spades.svg';\n\nimport './PlayingCardTitleContent.css';\n\nconst PlayingCardTitleContent = props => {\n    return (\n        <div className=\"playing-card-title-content\">\n            <span className=\"playing-card-title-content-value\">Q</span>\n            <h1 className=\"playing-card-title-content-title\">Queen of Spades</h1>\n            <div onClick={props.flip} className=\"playing-card-title-content-image-container\">\n                <img className=\"playing-card-title-content-image\" src={Spades} />\n            </div>\n        </div>\n    );\n};\n\nexport default PlayingCardTitleContent;\n","import React from 'react';\nimport PlayingCardTitleContent from './PlayingCardTitleContent';\n\nimport Crown from './Icons/crown.svg';\n\nimport './PlayingCardFront.css';\n\nconst PlayingCardFront = props => {\n    return (\n        <div className=\"playing-card-front\">\n            <div className=\"playing-card-front-container\">\n                <header className=\"playing-card-header\">\n                    <PlayingCardTitleContent flip={props.flip}></PlayingCardTitleContent>\n                </header>\n                <article className=\"playing-card-content\">\n                    <img src={Crown} alt=\"Queen\"></img>\n                </article>\n                <footer className=\"playing-card-footer\">\n                    <PlayingCardTitleContent flip={props.flip}></PlayingCardTitleContent>\n                </footer>\n            </div>\n        </div>\n    );\n};\n\nexport default PlayingCardFront;","import React from 'react';\nimport './PlayingCardBack.css';\n\nimport PlayingCardBackBackground from './Icons/playingCardBackBackground.png';\n\nconst PlayingCardBack = props => {\n    return (\n        <div className=\"playing-card-back\" onClick={props.flip}>\n            <div className=\"playing-card-back-container\">\n                <img className=\"playing-card-back-background\" src={PlayingCardBackBackground} />\n            </div>\n        </div>\n    );\n}\n\nexport default PlayingCardBack;","import React, { useState } from 'react';\nimport PlayingCardFront from './PlayingCardFront';\nimport PlayingCardBack from './PlayingCardBack';\nimport './PlayingCard.css';\n\nconst PlayingCard = () => {\n    const [flipClass, setFlipClass] = useState(\"\");\n    const toggleFlipClass = () =>{\n        setFlipClass(flipClass == \"\" ? \"flip-card\" : \"\");\n    }\n    return (\n        <section className=\"playing-card\">\n            <div className={ `playing-card-container ${flipClass}`}>\n                <PlayingCardFront flip={toggleFlipClass}></PlayingCardFront>\n                <PlayingCardBack flip={toggleFlipClass}></PlayingCardBack>\n            </div>\n        </section>\n    );\n};\n\nexport default PlayingCard;","import React from 'react';\nimport './App.css';\nimport PlayingCard from './components/PlayingCard/PlayingCard';\n\nconst App = () => {\n  return (\n    <div>\n      <PlayingCard></PlayingCard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}